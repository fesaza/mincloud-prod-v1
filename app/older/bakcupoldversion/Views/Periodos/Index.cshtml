@using ICC.Mincloud.Modelo.Entities
@using Kendo.Mvc.UI
@model IEnumerable<ICC.Mincloud.Modelo.Entities.Periodo>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-header">
    <h1>
        <i class="menu-icon fa fa-calendar"></i> Periodos
        <small>
            <i class="ace-icon fa fa-angle-double-right"></i>
            Lista de periodos
            <a class="btn btn-primary pull-right open-button" href='@Url.Action("Create","Periodos")' id="btnNuevo">
                <i class='ace-icon fa fa-calendar-plus-o'></i> Crear periodo
            </a>
        </small>

        @*@Html.ActionLink("Crear nuevo", "Create", null, new { @class = "btn btn-primary pull-right" })*@


    </h1>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="panel">
            <div class="">
                <div class="row">
                    @(Html.Kendo().Grid<Periodo>().Mobile()
                              .Name("grdFiltros")
                              .Columns(columns =>
                              {
                                  columns.Bound(c => c.PeriodoId).ClientTemplate("<div class='btn-group'>" +
                                                                                 "<a href='" + @Url.Action("Edit", new { id = "#: PeriodoId#" }) + "' class='btn btn-success btn-xs'><i class='ace-icon fa fa-pencil'></i></a>" +
                                                                                 "</div>" +
                                                                                 "<div class='btn-group'>" +
                                                                                 "<a href='" + @Url.Action("Delete", new { id = "#: PeriodoId#" }) + "' class='btn btn-danger btn-xs'><i class='glyphicon glyphicon-trash'></i></a>" +
                                                                                 "</div>").Width(100).Title("Acciones").Filterable(false);
                                  columns.Bound(c => c.Programa.Nombre).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains"))).Title("Programa");
                                  columns.Bound(c => c.Nombre).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                                  columns.Bound(c => c.FechaInicio).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains"))).Title("Fecha inicio").Format("{0:dd/MM/yyyy}");
                                  columns.Bound(c => c.FechaFin).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains"))).Title("Fecha fin").Format("{0:dd/MM/yyyy}");
                                  columns.Bound(c => c.PeriodoId).ClientTemplate("<div class='btn-group'>" +
                                                                                 "<a href='" + @Url.Action("GestionarGrupos", "Grupos", new { periodoId = "#: PeriodoId#" }) + "' class='btn btn-success orange btn-sm'><i class='ace-icon fa fa-calendar-check-o'></i>Gestionar grupos</a>" +
                                                                                 "</div>").Width(100).Title("Grupos").Filterable(false);
                                  columns.Bound(c => c.CanMatricular).ClientTemplate("#=generateTemplate(data)#").Width(100).Title("Horarios").Filterable(false);
                              })

                              .ColumnMenu().Groupable(g => g.Enabled(false))
                              .Sortable()
                              .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                              .Pageable(pageable => pageable
                                  .Refresh(true)
                                  .PageSizes(true)
                                  .ButtonCount(5))
                              .DataSource(dataSource => dataSource
                                  .Ajax()
                                  .PageSize(20)
                                  .ServerOperation(true).Sort(m=>m.Add(model=>model.FechaInicio).Descending())
                                  .Read(read => read.Action("GetPeriodos", "Periodos")))
                    )
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    function generateTemplate(item)
    {
        debugger;
        var template = "<div>";

        if(item.CanMatricular)
        {
            template = template+ "<div class='btn-group'>" +
                                                                                 "<a href='/GruposMatriculas/Estudiantes?periodoId="+item.PeriodoId+"' class='btn btn-warning orange btn-sm'><i class='ace-icon fa fa-calendar-plus-o'></i>Matriculas</a>" +
                                                                                 "</div>";
        }
        
        template = template+"</div>";

        return template;
    };
</script>